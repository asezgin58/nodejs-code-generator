"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
function defaultMergeFn(context, props) {
    return Object.assign({}, context, props);
}
function connectContext(ContextConsumer, mergeContextWithProps) {
    if (mergeContextWithProps === void 0) { mergeContextWithProps = defaultMergeFn; }
    return function (Component) {
        return function (props) {
            // TODO remove `as any` when is available in the react typing definition
            if (!ContextConsumer.currentValue instanceof Object) {
                throw new Error("react-connect-context: the current value of the given context identifier is _not_ an object,\n        and therefore cannot be passed as props to " + Component.name + ". Please check the value in the context\n        and try again.\n\n        More info: https://github.com/Contiamo/react-connect-context#gotchas");
            }
            return (React.createElement(ContextConsumer, null, function (context) { return React.createElement(Component, __assign({}, mergeContextWithProps(context, props))); }));
        };
    };
}
exports.connectContext = connectContext;
//# sourceMappingURL=index.js.map